#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2014-2015, Human Brain Project
#                          Cyrille Favreau <cyrille.favreau@epfl.ch>
#
# This file is part of RenderingResourceManager
# <https://github.com/BlueBrain/HTTPImageStreaming>
#
# This library is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License version 3.0 as published
# by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# All rights reserved. Do not distribute without further notice.

"""
This module contains the class in charge of fetching images from remote rendering
resources.
"""

# pylint: disable=W0403
import requests
import base64
import json
import datetime

import custom_logging as log

from settings import HISS_IMAGE_JPEG, HISS_REQUEST_TIMEOUT, HISS_FRAMES_PER_SECOND


class RestFrameGrabber(object):
    """
    Constructor
    :param uri URI from which the image should be fetched
    """
    def __init__(self, uri):
        # Contains the default 'not found' image
        self._uri = uri + HISS_IMAGE_JPEG

    def get_frame(self):
        """
        Returns the current image generated by the remote rendering resource
        """
        try:
            start = datetime.datetime.now()
            response = requests.get(
                url=self._uri, timeout=HISS_REQUEST_TIMEOUT,
                headers={'Content-Type': 'application/json'})
            duration = datetime.datetime.now() - start
            delay = 1e6 / float(HISS_FRAMES_PER_SECOND) - duration.microseconds
            if delay > 0:
                import time
                time.sleep(delay / 1e6)
            status = response.status_code
            response.close()
            if status == 200:
                json_image_b64 = json.loads(response.content)
                return base64.decodestring(json_image_b64['data'])
        except requests.exceptions.ReadTimeout as e:
            log.error('Connection error: ' + str(e))
        return None
